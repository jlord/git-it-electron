#!/bin/sh

# zgrep -- a wrapper around a grep program that decompresses files as needed
# Adapted from a version sent by Charles Levert <charles@comm.polymtl.ca>

# Copyright (C) 1998, 2001, 2002, 2006, 2007, 2009, 2010 Free Software
# Foundation

# Copyright (C) 1993 Jean-loup Gailly

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

bindir='/usr/bin'
case $1 in
--__bindir) bindir=${2?}; shift; shift;;
esac
PATH=$bindir:$PATH

grep='${GREP-'\''/usr/bin/grep'\''}'

version='zgrep (gzip) 1.6
Copyright (C) 2010-2013 Free Software Foundation, Inc.
This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.

Written by Jean-loup Gailly.'

usage="Usage: $0 [OPTION]... [-e] PATTERN [FILE]...
Look for instances of PATTERN in the input FILEs, using their
uncompressed contents if they are compressed.

OPTIONs are the same as for 'grep'.

Report bugs to <bug-gzip@gnu.org>."

# sed script to escape all ' for the shell, and then (to handle trailing
# newlines correctly) append ' to the last line.
escape='
  s/'\''/'\''\\'\'''\''/g
  $s/$/'\''/
'
operands=
have_pat=0
files_with_matches=0
files_without_matches=0
no_filename=0
with_filename=0

while test $# -ne 0; do
  option=$1
  shift
  optarg=

  case $option in
  (-[0123456789EFGHIKLPRTUVZabchilnoqrsuvwxyz]*[!0123456789]*)
    arg2=-\'$(expr "X$option" : 'X-.[0-9]*\(.*\)' | sed "$escape")
    eval "set -- $arg2 "'${1+"$@"}'
    option=$(expr "X$option" : 'X\(-.[0-9]*\)');;
  (--binary-*=* | --[lm]a*=* | --reg*=*)
    ;;
  (-[ABCDXdefm] | binary-* | --file | --[lm]a* | --reg*)
    case ${1?"$option option requires an argument"} in
    (*\'*)
      optarg=" '"$(printf '%s\n' "$1" | sed "$escape");;
    (*)
      optarg=" '$1'";;
    esac
    shift;;
  (-f?*\'*)
    optarg=" '"$(expr "X$option" : 'X-f\(.*\)' | sed "$escape")
    option=-f;;
  (-f?*)
    optarg=" '"$(expr "X$option" : 'X-f\(.*\)')\'
    option=-f;;
  (--file=*\'*)
    optarg=" '"$(expr "X$option" : 'X--file=\(.*\)' | sed "$escape")
    option=--file;;
  (--file=*)
    optarg=" '"$(expr "X$option" : 'X--file=\(.*\)')\'
    option=--file;;
  (--)
    break;;
  (-?*)
    ;;
  (*)
    case $option in
    (*\'*)
      operands="$operands '"$(printf '%s\n' "$option" | sed "$escape");;
    (*)
      operands="$operands '$option'";;
    esac
    ${POSIXLY_CORRECT+break}
    continue;;
  esac

  case $option in
  (-[drRzZ] | --di* | --exc* | --inc* | --rec* | --nu*)
    printf >&2 '%s: %s: option not supported\n' "$0" "$option"
    exit 2;;
  (-e* | --reg*)
    have_pat=1;;
  (-f | --file)
    # The pattern is coming from a file rather than the command-line.
    # If the file is actually stdin then we need to do a little
    # magic, since we use stdin to pass the gzip output to grep.
    # Turn the -f option into an -e option by copying the file's
    # contents into OPTARG.
    case $optarg in
    (" '-'" | " '/dev/stdin'" | " '/dev/fd/0'")
      option=-e
      optarg=" '"$(sed "$escape") || exit 2;;
    esac
    have_pat=1;;
  (--h | --he | --hel | --help)
    echo "$usage" || exit 2
    exit;;
  (-H | --wi | --wit | --with | --with- | --with-f | --with-fi \
  | --with-fil | --with-file | --with-filen | --with-filena | --with-filenam \
  | --with-filename)
    with_filename=1
    continue;;
  (-l | --files-with-*)
    files_with_matches=1;;
  (-L | --files-witho*)
    files_without_matches=1;;
  (-h | --no-f*)
    no_filename=1;;
  (-V | --v | --ve | --ver | --vers | --versi | --versio | --version)
    echo "$version" || exit 2
    exit;;
  esac

  case $option in
  (*\'?*)
    option=\'$(printf '%s\n' "$option" | sed "$escape");;
  (*)
    option="'$option'";;
  esac

  grep="$grep $option$optarg"
done

eval "set -- $operands "'${1+"$@"}'

if test $have_pat -eq 0; then
  case ${1?"missing pattern; try \`$0 --help' for help"} in
  (*\'*)
    grep="$grep -- '"$(printf '%s\n' "$1" | sed "$escape");;
  (*)
    grep="$grep -- '$1'";;
  esac
  shift
fi

if test $# -eq 0; then
  set -- -
fi

exec 3>&1
res=0

for i
do
  # Fail if gzip or grep (or sed) fails.
  gzip_status=$(
    exec 5>&1
    (gzip -cdfq -- "$i" 5>&-; echo $? >&5) 3>&- |
    if test $files_with_matches -eq 1; then
      eval "$grep" >/dev/null && { printf '%s\n' "$i" || exit 2; }
    elif test $files_without_matches -eq 1; then
      eval "$grep" >/dev/null || {
        r=$?
        if test $r -eq 1; then
          printf '%s\n' "$i" || r=2
        fi
        exit $r
      }
    elif test $with_filename -eq 0 &&
         { test $# -eq 1 || test $no_filename -eq 1; }; then
      eval "$grep"
    else
      case $i in
      (*'
'* | *'&'* | *'\'* | *'|'*)
        i=$(printf '%s\n' "$i" |
            sed '
              $!N
              $s/[&\|]/\\&/g
              $s/\n/\\n/g
            ');;
      esac
      sed_script="s|^|$i:|"

      # Fail if grep or sed fails.
      r=$(
        exec 4>&1
        (eval "$grep" 4>&-; echo $? >&4) 3>&- | sed "$sed_script" >&3 4>&-
      ) && exit $r
      r=$?
      test 1 -lt $r && exit $r || exit 2
    fi >&3 5>&-
  )
  r=$?
  test 128 -lt $r && exit $r
  test "$gzip_status" -eq 0 || test "$gzip_status" -eq 2 || r=2
  test $res -lt $r && res=$r
done
exit $res
